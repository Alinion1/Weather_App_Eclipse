package application;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import java.util.Scanner;

import javafx.fxml.FXML;
import javafx.scene.control.TextField;
import javafx.scene.text.Text;

public class Controller {
	
	@FXML
	private Text temperature;
	@FXML
	private Text humidity;
	@FXML
	private Text wind;
	@FXML
	private Text clText;
	@FXML
	private Text emoji;
	@FXML
	private TextField locationTxt;

    
    private String locationSvd = ""; 
   
   
   private static HttpURLConnection fetchApiResponse(String urlString) {
    	try {
			// attempt to create connection
    		URL url=new URI(urlString).toURL();
    		HttpURLConnection connection=(HttpURLConnection) url.openConnection();
    		connection.setRequestMethod("GET");
    		
    		return connection;
    		
		} catch (Exception e) {
			e.printStackTrace();
		}
    	return null;
    }

    private static String readApiResponse(HttpURLConnection apiConnection) {
    	try {
			StringBuilder resultJsonBuilder=new StringBuilder();
			Scanner scanner=new Scanner(apiConnection.getInputStream());
			
			while(scanner.hasNext()) {
				resultJsonBuilder.append(scanner.nextLine());
			}
			
			scanner.close();
			
			return resultJsonBuilder.toString();
			
		} catch (IOException e) {
			e.printStackTrace();
		}
    	return null;
    }
    
    
    public static JSONObject getLocationData(String locationSvd) {
    	locationSvd=locationSvd.replaceAll(" ","+");
    
    	String urlString="https://geocoding-api.open-meteo.com/v1/search?name="+locationSvd+"&count=1&language=en&format=json";
    	
    	try {
			HttpURLConnection apiConnection= fetchApiResponse(urlString);
			
			if(apiConnection.getResponseCode()!= 200) {
				System.out.println("Error: COuld not connect to API");
				return null;
			}
    		
			String jSONResponseString=readApiResponse(apiConnection);
			
			JSONParser parser=new JSONParser();
			JSONObject resultJsonObject=(JSONObject) parser.parse(jSONResponseString);
			
			JSONArray locationDatArray=(JSONArray) resultJsonObject.get("results");
			return (JSONObject) locationDatArray.get(0);	
			
		} catch (Exception e) {
			e.printStackTrace();
		}
    	return null;
    }
    
    private  void displayWeatherData(double latitude,double longitude) {
    	try {
    	String urlString="https://api.open-meteo.com/v1/forecast?latitude="+latitude+"&longitude="+longitude+"&current=temperature_2m,relative_humidity_2m,weather_code,wind_speed_10m";
    	HttpURLConnection apiConnection=fetchApiResponse(urlString);
    	
    	if(apiConnection.getResponseCode() != 200) {
    		System.out.println("Error: Could not connect to API");
    		return;
    	}
    	
    	String jsonresponseString=readApiResponse(apiConnection);
    	
    	JSONParser parser=new JSONParser();
    	JSONObject jsonObject=(JSONObject) parser.parse(jsonresponseString);
    	JSONObject currentWeatherJsonObject=(JSONObject) jsonObject.get("current");
    	
         
    	temperature.setText(currentWeatherJsonObject.get("temperature_2m").toString());
         humidity.setText(currentWeatherJsonObject.get("relative_humidity_2m").toString());
         wind.setText(currentWeatherJsonObject.get("wind_speed_10m").toString());
         clText.setText(currentWeatherJsonObject.get("weather_code").toString());
         
         String clString=clText.getText();
         
         
         
         String[] weatherStrings={"sunny","partly cloudy","cloudy","raining","snowing"};
         String pcloudString="1,2,3";
         String cloudString="45,48,51,53,55,56,57";
         String rainString="61,63,65,66,67,80,81,82,95*,96,99*";
         String snowString="71,73,75,77,85,86";

		if(clString.equals("0")) {
			clText.setText(weatherStrings[0]);
			emoji.setText("☀️");
			}
		else if(pcloudString.contains(clString)) {
			clText.setText(weatherStrings[1]);
			emoji.setText("☀️");
		}
		else if(cloudString.contains(clString)) {
			clText.setText(weatherStrings[2]);
			emoji.setText("☀️");
		}
		else if(rainString.contains(clString)) {
			clText.setText(weatherStrings[3]);
			emoji.setText("☀️");
		}
		else if(snowString.contains(clString)) {
			clText.setText(weatherStrings[4]);
			emoji.setText("☀️");
		}
		
 	}catch (Exception e) {
			e.printStackTrace();
		}
    	
    }
    
   
    @FXML 
    private void handleSave() {
    	try {
    	locationSvd = locationTxt.getText();
    	
    	//get location data
    	  JSONObject cityLocationDataJsonObject=(JSONObject)getLocationData(locationSvd);
    	  
    	  double latitude=(double)cityLocationDataJsonObject.get("latitude");
    	  double longitude=(double)cityLocationDataJsonObject.get("longitude");
    	  
    	  displayWeatherData(latitude,longitude);  
    	  
    	
        System.out.println("Text salvat: " + locationSvd); 
        locationTxt.clear();
        
    	}catch(Exception e) {
    		e.printStackTrace();
    	}
    }
    
    public String getSavedText() {
        return locationSvd;
    }
}
